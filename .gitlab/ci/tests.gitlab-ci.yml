# GG Bot Upload Assistant
# Copyright (C) 2022  Noob Master669

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# ********************************************** #
# ********************************************** #
#                 E2E Tests GG-BOT               #
# ********************************************** #
# ********************************************** #
# E2E tests for Parent Repo with report generation
e2e-test:
  services:
    - name: docker:dind
      command: [ "--tls=false" ]
  stage: test
  image: noobmaster669/gg-bot-base:test-latest
  variables:
    SOURCE_DIRECTORY: gg-bot-upload-assistant
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - pip install codecov-cli
    - pip install -r requirements/requirements_test.txt
    - pip freeze > requirements/requirements_test.txt
    - pytest -vv --show-capture=stdout --cov-report=html --junitxml=e2e-test.junit.xml -o junit_family=legacy --cov=./ e2e-tests/

    # generating xml coverage report for various platforms
    - coverage report
    - coverage xml -o coverage.xml
    - sed -i "s=<source>.*${SOURCE_DIRECTORY}</source>=<source>./${SOURCE_DIRECTORY}</source>=g" coverage.xml
    - sed -i "s;filename=\";filename=\"${SOURCE_DIRECTORY}/;g" coverage.xml

    # sending coverage report to codecov
    - curl -Os https://uploader.codecov.io/latest/alpine/codecov
    - chmod +x codecov
    - ./codecov -F e2e-test --verbose -R .
    - codecovcli do-upload --report-type test_results --file e2e-test.junit.xml

    # sending coverage report for codacy
    - curl -Os https://coverage.codacy.com/get.sh
    - chmod +x get.sh
    - sh get.sh report -l Python -r coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    name: "e2e-test-report-$CI_COMMIT_REF_NAME"
    expose_as: E2E test and coverage results
    paths:
      - coverage.xml
      - e2e-test.junit.xml
      - coverage
      - assistant.log
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit:
        - e2e-test.junit.xml
    expire_in: 90 days
  environment:
    name: e2e-test/reports/$CI_COMMIT_REF_NAME
    auto_stop_in: 2 months
    url: $PAGES_URL/-/jobs/$CI_JOB_ID/artifacts/coverage/index.html

# ********************************************** #
# ********************************************** #
#                Unit Tests GG-BOT               #
# ********************************************** #
# ********************************************** #
# Unit test for Parent Repo with report generation
unit-test:
  stage: test
  image: noobmaster669/gg-bot-base:test-latest
  variables:
    SOURCE_DIRECTORY: gg-bot-upload-assistant
  script:
    - pip install codecov-cli
    - pip install -r requirements/requirements_test.txt
    - pip freeze > requirements/requirements_test.txt
    - pytest -vv --show-capture=stdout --cov-report=html --junitxml=unit-test.junit.xml -o junit_family=legacy --cov=./ tests/

    # generating xml coverage report for various platforms
    - coverage report
    - coverage xml -o coverage.xml
    - sed -i "s=<source>.*${SOURCE_DIRECTORY}</source>=<source>./${SOURCE_DIRECTORY}</source>=g" coverage.xml
    - sed -i "s;filename=\";filename=\"${SOURCE_DIRECTORY}/;g" coverage.xml

    # sending coverage report to codecov
    - curl -Os https://uploader.codecov.io/latest/alpine/codecov
    - chmod +x codecov
    - ./codecov -F unit-test --verbose -R .
    - codecovcli do-upload --report-type test_results --file unit-test.junit.xml

    # sending coverage report for codacy
    - curl -Os https://coverage.codacy.com/get.sh
    - chmod +x get.sh
    - sh get.sh report -l Python -r coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    name: "test-report-$CI_COMMIT_REF_NAME"
    expose_as: Unit test and coverage results
    paths:
      - coverage.xml
      - unit-test.junit.xml
      - coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit:
        - unit-test.junit.xml
    expire_in: 90 days
  environment:
    name: test/reports/$CI_COMMIT_REF_NAME
    auto_stop_in: 2 months
    url: $PAGES_URL/-/jobs/$CI_JOB_ID/artifacts/coverage/index.html

# Unit tests for MRs without any report generation
unit-test-mr:
  stage: test
  image: noobmaster669/gg-bot-base:test-latest
  variables:
    SOURCE_DIRECTORY: gg-bot-upload-assistant
  script:
    - pip install -r requirements/requirements_test.txt
    - pip freeze > requirements/requirements_test.txt
    - pytest -vv --show-capture=stdout --cov-report=html --junitxml=junit_report.xml --cov=./ tests/
    - coverage report
    - coverage xml -o coverage.xml
    - sed -i "s=<source>.*${SOURCE_DIRECTORY}</source>=<source>./${SOURCE_DIRECTORY}</source>=g" coverage.xml
    - sed -i "s;filename=\";filename=\"${SOURCE_DIRECTORY}/;g" coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    name: "test-report-mr-$CI_COMMIT_REF_NAME"
    expose_as: Unit test and coverage results for Merge Request
    paths:
      - coverage.xml
      - junit_report.xml
      - coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit:
        - junit_report.xml
    expire_in: 30 days
  environment:
    name: test/reports/mr/$CI_COMMIT_REF_NAME
    auto_stop_in: 1 months
    url: $PAGES_URL/-/jobs/$CI_JOB_ID/artifacts/coverage/index.html
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

sast:
  stage: test
# pre-commit-checks:
#   image: python:3.9.10
#   stage: prepare
#   before_script:
#     - pip install pre-commit
#   script:
#     - pre-commit run --all-files --verbose --show-diff-on-failure
