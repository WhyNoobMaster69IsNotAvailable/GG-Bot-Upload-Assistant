FROM alpine:3.15 AS GIT_CLONER

RUN apk fix
RUN apk --update add git git-lfs less openssh && \
    git lfs install && \
    rm -rf /var/lib/apt/lists/* && \
    rm /var/cache/apk/*

RUN mkdir /clone
WORKDIR  /clone
RUN git clone https://github.com/zoffline/BDInfoCLI-ng.git

FROM ubuntu:20.04
ENV MONO_VERSION 6.12.0.122
ENV DEBIAN_FRONTEND=noninteractive

RUN \
	apt update && \
	apt install -y gnupg ca-certificates && \
	apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
	echo "deb https://download.mono-project.com/repo/ubuntu stable-focal/snapshots/$MONO_VERSION main" | tee /etc/apt/sources.list.d/mono-official-stable.list

RUN \
	apt update && \
	apt-get install -y mono-runtime && \
	rm -rf /var/lib/apt/lists/* /tmp/*

RUN \
	apt-get update && \
	apt-get install -y --no-install-recommends tzdata

RUN \
	apt update && \
	apt-get install -y binutils curl mono-devel ca-certificates-mono fsharp mono-vbnc nuget referenceassemblies-pcl && \
	rm -rf /var/lib/apt/lists/* /tmp/*

RUN mkdir -p /usr/src/app/source /usr/src/app/build
WORKDIR /usr/src/app/source

COPY --from=GIT_CLONER /clone/BDInfoCLI-ng/ .
RUN nuget restore -NonInteractive
RUN xbuild /property:Configuration=Release /property:OutDir=/usr/src/app/build/
WORKDIR /usr/src/app/build

RUN \
	apt update && \
	apt install -y python3-pip ffmpeg mediainfo python3 mktorrent unrar
RUN mkdir /app
WORKDIR /app

COPY requirements.txt .

RUN \
  echo "**** install pip packages ****" && \
  pip install -r requirements.txt && \
  pip freeze > requirements.txt

COPY . .
RUN chmod +x auto_upload.py
RUN chmod +x bdinfo

# ports and volumes
VOLUME /data /temp_upload

ENTRYPOINT [ "python3", "auto_upload.py"]

# FROM alpine:3.14

# RUN \
#  echo "**** install build packages ****" && \
#  apk add --no-cache --virtual=build-dependencies \
# 	g++ \
# 	py3-pip \
# 	python3-dev
# RUN \
#  echo "**** install runtime packages ****" && \
#  apk add --no-cache --upgrade \
# 	ffmpeg \
# 	mediainfo \
# 	python3 \
# 	mktorrent \
# 	unrar

# WORKDIR /app

# # add local files
# COPY requirements.txt .
# RUN \
#   echo "**** install pip packages ****" && \
#   pip3 install -r requirements.txt && \
#   pip3 freeze > requirements.txt

# COPY . .
# RUN chmod +x auto_upload.py
# RUN chmod +x bdinfo

# # ports and volumes
# VOLUME /data /temp_upload

# ENTRYPOINT [ "python3", "auto_upload.py"]
# # ENTRYPOINT [ "python3", "ReadErrorTest.py"]
